{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","dbRef","ref","RESULT","options","Game","onFinish","initialOptions","nToUse","gameId","useState","solution","setSolution","currentSum","setCurrentSum","chosen","setChosen","showSolution","setShowSolution","useEffect","sol","makeSolution","reduce","x","y","className","map","num","includes","disabled","onClick","newSum","hasSolution","filter","curr","setTimeout","arr","n","array","shuffled","i","length","j","Math","floor","random","temp","slice","randomlySelectN","sum","Success","style","fontSize","Failure","App","level","setLevel","score","setScore","prize","setPrize","setNToUse","state","setState","username","setUsername","simpleMode","setSimpleMode","setGameId","on","snapshot","user","val","name","minN","maxN","min","nToUseVal","ceil","result","newScore","update","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e08d6569.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport * as firebase from 'firebase/app';\nimport 'firebase/database';\n\n// TODO: Replace the following with your app's Firebase project configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyC8ZXJBanm83WVhdbYnrSR_gV7QDNR7NzY',\n  authDomain: 'math-a7cdc.firebaseapp.com',\n  databaseURL: 'https://math-a7cdc.firebaseio.com',\n  projectId: 'math-a7cdc',\n  storageBucket: 'math-a7cdc.appspot.com',\n  messagingSenderId: '438256651307',\n  appId: '1:438256651307:web:2bde54ba227715a1d7ee6e',\n  measurementId: 'G-HG898MJZF7'\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nvar dbRef = firebase.database().ref('/users/jonathan');\n\n// https://console.firebase.google.com/u/0/project/math-a7cdc/database/math-a7cdc/data\n\nconst RESULT = {\n  FAILED: 'FAILED',\n  SUCCESS: 'SUCCESS'\n};\n\nconst options = [1, 3, 5, 7, 11, 13, 16];\nconst App = () => {\n  const [level, setLevel] = useState();\n  const [score, setScore] = useState();\n  const [prize, setPrize] = useState();\n  const [nToUse, setNToUse] = useState();\n  const [state, setState] = useState();\n  const [username, setUsername] = useState();\n  const [simpleMode, setSimpleMode] = useState(false);\n  const [gameId, setGameId] = useState(1);\n\n  useEffect(() => {\n    dbRef.on('value', function(snapshot) {\n      const user = snapshot.val();\n      setUsername(user.name);\n      setScore(user.score);\n      setLevel(user.level);\n      setSimpleMode(user.simpleMode);\n    });\n\n    const minN = level + 1;\n    const maxN = Math.min(options.length, (level + 1) * 2);\n    const nToUseVal = simpleMode\n      ? 1\n      : Math.ceil(Math.random() * (maxN - minN)) + minN;\n    const prize = Math.ceil(Math.random() * options.length * level);\n    setNToUse(nToUseVal);\n    setPrize(prize);\n  }, [username, score, level, simpleMode]);\n\n  return username ? (\n    <span className=\"app-container\">\n      <span className=\"stats-container\">\n        <div className=\"stat\">{score}</div>\n        <div className=\"stat\">${prize}</div>\n        <div className=\"stat\">{username}</div>\n      </span>\n      {state === RESULT.FAILED ? (\n        <Failure />\n      ) : state === RESULT.SUCCESS ? (\n        <Success />\n      ) : (\n        <Game\n          nToUse={nToUse}\n          initialOptions={options}\n          gameId={gameId}\n          onFinish={result => {\n            setState(result);\n            setTimeout(() => {\n              setState();\n              setGameId(gameId + 1);\n            }, 2000);\n            const newScore =\n              result === RESULT.SUCCESS ? score + prize : score - prize;\n            dbRef.update({\n              score: newScore\n            });\n          }}\n        />\n      )}\n    </span>\n  ) : (\n    <span>Loadings...</span>\n  );\n};\nconst Game = ({onFinish, initialOptions, nToUse, gameId}) => {\n  const [solution, setSolution] = useState();\n  const [currentSum, setCurrentSum] = useState();\n  const [chosen, setChosen] = useState({});\n  const [showSolution, setShowSolution] = useState(false);\n\n  useEffect(() => {\n    const sol = makeSolution(initialOptions, nToUse);\n    setSolution(sol);\n    setCurrentSum(sol.reduce((x, y) => x + y, 0));\n  }, [gameId, initialOptions, nToUse]);\n  return (\n    <span>\n      Sum = {currentSum}\n      <header className=\"game-container\">\n        {initialOptions.map(num => (\n          <button\n            className={`num ${chosen[num] ? 'disabled' : ''} ${\n              showSolution && solution.includes(num) ? 'part-of-solution' : ''\n            }`}\n            disabled={chosen[num]}\n            onClick={() => {\n              const newSum = currentSum - num;\n              setChosen({...chosen, [num]: true});\n              if (\n                !hasSolution(\n                  options.filter(curr => !chosen[curr] && curr !== num),\n                  newSum\n                )\n              ) {\n                setTimeout(() => onFinish(RESULT.FAILED), 2000);\n                setShowSolution(true);\n              } else if (newSum === 0) {\n                onFinish(RESULT.SUCCESS);\n              } else {\n                setCurrentSum(newSum);\n              }\n            }}>\n            {num}\n          </button>\n        ))}\n      </header>\n    </span>\n  );\n};\n\nconst makeSolution = (arr, n) => randomlySelectN(arr, n);\n\nfunction randomlySelectN(array, n) {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const temp = shuffled[i];\n    shuffled[i] = shuffled[j];\n    shuffled[j] = temp;\n  }\n\n  return shuffled.slice(0, n);\n}\n\nconst hasSolution = (options, sum) => {\n  if (sum === 0) return true;\n  if (sum > 0 && options.length === 0) return false;\n  if (sum < 0) return false;\n\n  return (\n    hasSolution(options.slice(1), sum - options[0]) ||\n    hasSolution(options.slice(1), sum)\n  );\n};\n\nconst Success = () => (\n  <div className=\"game-container\" style={{fontSize: 36}}>\n    SUCCESS!!! :) :)\n  </div>\n);\nconst Failure = () => (\n  <div className=\"game-container\" style={{fontSize: 36}}>\n    Failed!!! :( :(\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}