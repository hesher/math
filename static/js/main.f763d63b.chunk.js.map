{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","Success","style","fontSize","Failure","App","initial","useState","selected","setSelected","theSet","Set","x","add","Array","from","values","delete","useSet","remove","sum","setSum","money","setMoney","prize","setPrize","totalPrize","setTotalPrize","success","setSuccess","failed","setFailed","reset","theSelected","reduce","y","Math","random","ceil","useEffect","className","display","map","num","onClick","setTimeout","every","cantSum","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wIAAAA,EAAOC,QAAU,IAA0B,kC,oHC0F3C,IAAMC,EAAU,kBAAM,yBAAKC,MAAO,CAAEC,SAAU,KAAxB,sBAChBC,EAAU,kBAAM,yBAAKF,MAAO,CAAEC,SAAU,KAAxB,qBAQPE,MA7Ef,WAAgB,IAAD,EAlBf,WAA+B,IAAfC,EAAc,uDAAJ,GAAI,EACIC,mBAASD,GADb,mBACrBE,EADqB,KACXC,EADW,KAEtBC,EAAS,IAAIC,IAAIH,GAEvB,MAAO,CACLA,EACA,SAAAI,GACEF,EAAOG,IAAID,GACXH,EAAYK,MAAMC,KAAKL,EAAOM,YAEhC,SAAAJ,GACEF,EAAOO,OAAOL,GACdH,EAAYK,MAAMC,KAAKL,EAAOM,YAEhCP,GAK2CS,CAAO,IADvC,mBACNV,EADM,KACSW,GADT,WACiBV,EADjB,OAESF,qBAFT,mBAENa,EAFM,KAEDC,EAFC,OAGad,mBAAS,GAHtB,mBAGNe,EAHM,KAGCC,EAHD,OAIahB,mBAAS,GAJtB,mBAINiB,EAJM,KAICC,EAJD,OAKuBlB,mBAAS,GALhC,mBAKNmB,EALM,KAKMC,EALN,OAMiBpB,oBAAS,GAN1B,mBAMNqB,EANM,KAMGC,EANH,OAOetB,oBAAS,GAPxB,mBAONuB,EAPM,KAOEC,EAPF,KASPC,EAAQ,WACZ,IAAMC,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,IACzCxB,EAAYwB,GACZZ,EAAOY,EAAYC,QAAO,SAACtB,EAAGuB,GAAJ,OAAUvB,GAAKwB,KAAKC,SAAW,GAAMF,EAAI,KAAI,IACvEV,EAASW,KAAKE,KAAqB,EAAhBF,KAAKC,WACxBR,GAAW,GACXE,GAAU,IAOZ,OAJAQ,qBAAU,WACRP,MACC,IAGD,yBAAKQ,UAAU,OACZZ,EACC,kBAAC,EAAD,MACEE,EACF,kBAAC,EAAD,MAEA,0BAAM5B,MAAO,CAAEuC,QAAS,SACtB,0BAAMD,UAAU,SACd,sCAAYpB,GACZ,wCAAcI,GACd,yCAAeF,IAEjB,4BAAQkB,UAAU,aACfhC,EAASkC,KAAI,SAAAC,GAAG,OACf,4BACEH,UAAU,MACVI,QAAS,WACPzB,EAAOwB,GACPtB,EAAOD,EAAMuB,GACTvB,EAAMuB,IAAQ,GAChBpB,EAASD,EAAQE,GACjBG,EAAcH,EAAQE,GACtBG,GAAW,GACXgB,YAAW,WACTb,MACC,OACMZ,EAAMuB,EAAM,GAsBzC,SAAiBnC,EAAUY,GACzB,OACEZ,EAAS0B,QAAO,SAACtB,EAAGuB,GAAJ,OAAUvB,EAAIuB,IAAG,GAAKf,GAAOZ,EAASsC,OAAM,SAAAlC,GAAC,OAAIA,EAAIQ,KAxB3B2B,CAAQvC,EAAUY,MAC5CG,EAASD,EAAQE,GACjBO,GAAU,GACVc,YAAW,WACTb,MACC,QAINW,UCpEGK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f763d63b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction useSet(initial = []) {\n  const [selected, setSelected] = useState(initial);\n  const theSet = new Set(selected);\n\n  return [\n    selected,\n    x => {\n      theSet.add(x);\n      setSelected(Array.from(theSet.values()));\n    },\n    x => {\n      theSet.delete(x);\n      setSelected(Array.from(theSet.values()));\n    },\n    setSelected\n  ];\n}\n\nfunction App() {\n  const [selected, add, remove, setSelected] = useSet([]);\n  const [sum, setSum] = useState();\n  const [money, setMoney] = useState(0);\n  const [prize, setPrize] = useState(0);\n  const [totalPrize, setTotalPrize] = useState(0);\n  const [success, setSuccess] = useState(false);\n  const [failed, setFailed] = useState(false);\n\n  const reset = () => {\n    const theSelected = [1, 3, 5, 7, 11, 13, 16];\n    setSelected(theSelected);\n    setSum(theSelected.reduce((x, y) => x + (Math.random() > 0.5 ? y : 0), 0));\n    setPrize(Math.ceil(Math.random() * 5));\n    setSuccess(false);\n    setFailed(false);\n  };\n\n  useEffect(() => {\n    reset();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {success ? (\n        <Success />\n      ) : failed ? (\n        <Failure />\n      ) : (\n        <span style={{ display: \"flex\" }}>\n          <span className=\"stats\">\n            <div>Sum = {sum}</div>\n            <div>Prize= ${prize}</div>\n            <div>Money = ${money}</div>\n          </span>\n          <header className=\"container\">\n            {selected.map(num => (\n              <button\n                className=\"num\"\n                onClick={() => {\n                  remove(num);\n                  setSum(sum - num);\n                  if (sum - num === 0) {\n                    setMoney(money + prize);\n                    setTotalPrize(prize + totalPrize);\n                    setSuccess(true);\n                    setTimeout(() => {\n                      reset();\n                    }, 1000);\n                  } else if (sum - num < 0 || cantSum(selected, sum)) {\n                    setMoney(money - prize);\n                    setFailed(true);\n                    setTimeout(() => {\n                      reset();\n                    }, 1000);\n                  }\n                }}\n              >\n                {num}\n              </button>\n            ))}\n          </header>\n        </span>\n      )}\n    </div>\n  );\n}\n\nconst Success = () => <div style={{ fontSize: 36 }}> SUCCESS!!! :) :)</div>;\nconst Failure = () => <div style={{ fontSize: 36 }}>Failed!!! :( :( </div>;\n\nfunction cantSum(selected, sum) {\n  return (\n    selected.reduce((x, y) => x + y, 0) < sum || selected.every(x => x > sum)\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}