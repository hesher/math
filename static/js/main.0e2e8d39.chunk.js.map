{"version":3,"sources":["RESULT.js","selectRandomN.js","AddToSum.js","PlayerChoose.js","App.js","serviceWorker.js","index.js"],"names":["selectRandomN","array","n","shuffled","i","length","j","Math","floor","random","temp","slice","AddToSum","onFinish","initialOptions","nToUse","gameId","useState","solution","setSolution","currentSum","setCurrentSum","chosen","setChosen","showSolution","setShowSolution","useEffect","sol","makeSolution","reduce","x","y","className","map","num","includes","disabled","onClick","newSum","newChosen","forwardSolution","findSolution","filter","curr","console","log","Object","entries","number","Number","setTimeout","RESULT","arr","options","sum","left","right","PlayerChoose","onSubmit","username","setUsername","password","setPassword","ev","preventDefault","name","type","onChange","target","value","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","sort","a","b","Success","style","fontSize","Failure","App","level","setLevel","score","setScore","prize","setPrize","setNToUse","state","setState","realUsername","setRealUsername","simpleMode","setSimpleMode","setGameId","userLogged","setUserLogged","ref","on","snapshot","user","val","minN","maxN","min","nToUseVal","ceil","result","newScore","update","pUsername","pass","dbRef","once","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0e2e8d39.chunk.js","sourcesContent":["export default {\n  FAILED: 'FAILED',\n  SUCCESS: 'SUCCESS'\n};\n","export default function selectRandomN(array, n) {\n  const shuffled = [...array];\n  for (let i = shuffled.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * i);\n    const temp = shuffled[i];\n    shuffled[i] = shuffled[j];\n    shuffled[j] = temp;\n  }\n\n  return shuffled.slice(0, n);\n}\n","import React, {useState, useEffect} from 'react';\nimport RESULT from './RESULT';\nimport selectRandomN from './selectRandomN';\n\nexport default function AddToSum({onFinish, initialOptions, nToUse, gameId}) {\n  const [solution, setSolution] = useState();\n  const [currentSum, setCurrentSum] = useState();\n  const [chosen, setChosen] = useState({});\n  const [showSolution, setShowSolution] = useState(false);\n\n  useEffect(() => {\n    const sol = makeSolution(initialOptions, nToUse);\n    setSolution(sol);\n    setCurrentSum(sol.reduce((x, y) => x + y, 0));\n  }, [gameId, initialOptions, nToUse]);\n  return (\n    <span className=\"big-game-container\">\n      <span className=\"game-sum\">{currentSum}</span>\n      <header className=\"game-container\">\n        {initialOptions.map(num => (\n          <button\n            className={`num ${chosen[num] ? 'disabled' : ''} ${\n              showSolution && solution.includes(num) ? 'part-of-solution' : ''\n            }`}\n            disabled={chosen[num]}\n            onClick={() => {\n              const newSum = currentSum - num;\n              const newChosen = {...chosen, [num]: true};\n              setChosen(newChosen);\n              const forwardSolution = findSolution(\n                initialOptions.filter(curr => !newChosen[curr] && curr !== num),\n                newSum\n              );\n              console.log(\n                Object.entries(newChosen)\n                  .filter(([_, isChosen]) => isChosen)\n                  .map(([number]) => Number(number))\n              );\n              if (forwardSolution !== null) {\n                setSolution([\n                  ...Object.entries(newChosen)\n                    .filter(([_, isChosen]) => isChosen)\n                    .map(([number]) => Number(number)),\n                  ...forwardSolution\n                ]);\n              }\n\n              if (forwardSolution === null) {\n                setTimeout(() => onFinish(RESULT.FAILED), 2000);\n                setShowSolution(true);\n              } else if (newSum === 0) {\n                onFinish(RESULT.SUCCESS);\n              } else {\n                setCurrentSum(newSum);\n              }\n            }}>\n            {num}\n          </button>\n        ))}\n      </header>\n    </span>\n  );\n}\n\nconst makeSolution = (arr, n) => selectRandomN(arr, n);\n\nconst findSolution = (options, sum) => {\n  if (sum === 0 && options.length === 0) return [];\n  if (sum >= 0 && options.length === 0) return null;\n  if (sum < 0) return null;\n\n  const left = findSolution(options.slice(1), sum - options[0]);\n  if (left !== null) {\n    return [options[0], ...left];\n  }\n  const right = findSolution(options.slice(1), sum);\n  if (right !== null) {\n    return right;\n  }\n  return null;\n};\n","import React, {useState} from 'react';\nimport './PlayerChoose.css';\n\nexport default function PlayerChoose({onSubmit}) {\n  const [username, setUsername] = useState();\n  const [password, setPassword] = useState();\n  return (\n    <span className=\"player-chooser-container\">\n      <form\n        onSubmit={ev => {\n          ev.preventDefault();\n          onSubmit(username, password);\n        }}>\n        <span className=\"player-chooser-container-field\">\n          <label>User</label>\n          <input\n            name=\"username\"\n            type=\"text\"\n            onChange={ev => setUsername(ev.target.value)}\n          />\n        </span>\n        <span className=\"player-chooser-container-field\">\n          <label>Password</label>\n          <input type=\"text\" onChange={ev => setPassword(ev.target.value)} />\n        </span>\n        <input type=\"submit\" value=\"Submit\" />\n      </form>\n    </span>\n  );\n}\n","import React, {useState, useEffect} from 'react';\nimport AddToSum from './AddToSum';\nimport './App.css';\nimport RESULT from './RESULT';\nimport selectRandomN from './selectRandomN';\nimport PlayerChoose from './PlayerChoose';\n\n// Firebase App (the core Firebase SDK) is always required and\n// must be listed before other Firebase SDKs\nimport * as firebase from 'firebase/app';\nimport 'firebase/database';\n\n// TODO: Replace the following with your app's Firebase project configuration\nconst firebaseConfig = {\n  apiKey: 'AIzaSyC8ZXJBanm83WVhdbYnrSR_gV7QDNR7NzY',\n  authDomain: 'math-a7cdc.firebaseapp.com',\n  databaseURL: 'https://math-a7cdc.firebaseio.com',\n  projectId: 'math-a7cdc',\n  storageBucket: 'math-a7cdc.appspot.com',\n  messagingSenderId: '438256651307',\n  appId: '1:438256651307:web:2bde54ba227715a1d7ee6e',\n  measurementId: 'G-HG898MJZF7'\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\n// https://console.firebase.google.com/u/0/project/math-a7cdc/database/math-a7cdc/data\n\nconst optionalOptions = [2, 3, 5, 7, 9, 11, 13, 17, 19, 23, 25, 31, 37];\nconst options = selectRandomN(optionalOptions, 9).sort((a, b) => a - b);\nconst App = () => {\n  const [level, setLevel] = useState();\n  const [score, setScore] = useState();\n  const [prize, setPrize] = useState();\n  const [nToUse, setNToUse] = useState();\n  const [state, setState] = useState();\n  const [username, setUsername] = useState();\n  const [realUsername, setRealUsername] = useState();\n  const [simpleMode, setSimpleMode] = useState(false);\n  const [gameId, setGameId] = useState(1);\n  const [userLogged, setUserLogged] = useState(false);\n\n  useEffect(() => {\n    if (userLogged) {\n      const dbRef = firebase.database().ref(`/users/${username}`);\n      dbRef.on('value', function(snapshot) {\n        const user = snapshot.val();\n        setRealUsername(user.name);\n        setScore(user.score);\n        setLevel(user.level);\n        setSimpleMode(user.simpleMode);\n      });\n      const minN = level + 1;\n      const maxN = Math.min(options.length, (level + 1) * 2);\n      const nToUseVal = simpleMode\n        ? 1\n        : Math.ceil(Math.random() * (maxN - minN)) + minN;\n      const prize = Math.ceil(Math.random() * options.length * level);\n      setNToUse(nToUseVal);\n      setPrize(prize);\n    }\n  }, [username, score, level, simpleMode, userLogged]);\n\n  return !userLogged ? (\n    <PlayerChoose\n      onSubmit={async (pUsername, pass) => {\n        const dbRef = firebase.database().ref(`/users/${pUsername}`);\n        const snapshot = await dbRef.once('value');\n        const user = snapshot.val();\n        if (user.password === pass) {\n          setUsername(pUsername);\n          setRealUsername(user.name);\n          setUserLogged(true);\n        }\n      }}\n    />\n  ) : (\n    <span className=\"app-container\">\n      <span className=\"stats-container\">\n        <div className=\"stat\">${score}</div>\n        <div className=\"stat\">${prize}</div>\n        <div className=\"stat\">{realUsername}</div>\n      </span>\n      {state === RESULT.FAILED ? (\n        <Failure />\n      ) : state === RESULT.SUCCESS ? (\n        <Success />\n      ) : (\n        <AddToSum\n          nToUse={nToUse}\n          initialOptions={options}\n          gameId={gameId}\n          onFinish={result => {\n            setState(result);\n            setTimeout(() => {\n              setState();\n              setGameId(gameId + 1);\n            }, 2000);\n            const newScore =\n              result === RESULT.SUCCESS ? score + prize : score - prize;\n            const dbRef = firebase.database().ref(`/users/${username}`);\n            dbRef.update({\n              score: newScore\n            });\n          }}\n        />\n      )}\n    </span>\n  );\n};\n\nconst Success = () => (\n  <div className=\"game-container\" style={{fontSize: 36}}>\n    SUCCESS!!! :) :)\n  </div>\n);\nconst Failure = () => (\n  <div className=\"game-container\" style={{fontSize: 36}}>\n    Failed!!! :( :(\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}